{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrencyRow","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","option","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","setAmount","amountInFromCurrency","setamountInFromCurrency","exchangeRate","setExchangeRate","data","setData","useEffect","fetch","then","res","json","Object","keys","rates","base","e","target","ReactDOM","render","document","getElementById"],"mappings":"+NAEe,SAASA,EAAYC,GAChC,IACIC,EAKAD,EALAC,gBACAC,EAIAF,EAJAE,iBACAC,EAGAH,EAHAG,iBACAC,EAEAJ,EAFAI,eACAC,EACAL,EADAK,OAEJ,OACI,gCACI,uBAAOC,KAAK,SAASC,UAAU,QAAQC,MAAOH,EAAQI,SAAUL,IAChE,wBAAQI,MAAON,EAAkBO,SAAUN,EAA3C,SACKF,EAAgBS,KAAI,SAAAC,GAAM,OACvB,wBAAqBH,MAAOG,EAA5B,SAAqCA,GAAxBA,WCoElBC,MA5Ef,WACE,IAQIC,EAAUC,EARd,EAA8CC,mBAAS,IAAvD,mBAAOd,EAAP,KAAwBe,EAAxB,KACA,EAAwCD,qBAAxC,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAoCH,qBAApC,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAA4BL,mBAAS,GAArC,mBAAOV,EAAP,KAAegB,EAAf,KACA,EAAwDN,oBAAS,GAAjE,mBAAOO,EAAP,KAA6BC,EAA7B,KACA,EAAwCR,qBAAxC,mBAAOS,EAAP,KAAqBC,EAArB,KACA,EAAwBV,qBAAxB,mBAAOW,EAAP,KAAaC,EAAb,KA+CA,OA3CIL,GACFR,EAAaT,EACbQ,EAAWR,EAASmB,IAEpBX,EAAWR,EACXS,EAAaT,EAASmB,GAGxBI,qBAAU,WACRC,MAtBa,wFAuBVC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAJ,GACJC,EAAQD,GACRV,EAAmB,YAAIiB,OAAOC,KAAKR,EAAKS,SAExCjB,EADsB,OAEtBE,EAAcM,EAAKU,MACnBX,EAAgBC,EAAKS,MAAL,UAEnB,IAEHP,qBAAU,WACY,MAAhBX,GAAsC,MAAdE,GAA8B,MAARO,IAC5CT,IAAiBS,EAAKU,KACxBX,EAAgBC,EAAKS,MAAMhB,IAClBA,IAAeO,EAAKU,KAC7BX,EAAgBC,EAAKS,MAAMlB,IAE3BQ,EAAgBC,EAAKS,MAAMhB,GAAcO,EAAKS,MAAMlB,OAGvD,CAACA,EAAcE,IAahB,qCACE,oDACA,cAACpB,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkBe,EAClBd,iBAAkB,SAAAkC,GAAC,OAAInB,EAAgBmB,EAAEC,OAAO9B,QAChDJ,eAjBN,SAAgCiC,GAC9BhB,EAAUgB,EAAEC,OAAO9B,OACnBe,GAAwB,IAgBpBlB,OAAQS,IAEV,qBAAKP,UAAU,SAAf,eACA,cAACR,EAAD,CACEE,gBAAiBA,EACjBC,iBAAkBiB,EAClBhB,iBAAkB,SAAAkC,GAAC,OAAIjB,EAAciB,EAAEC,OAAO9B,QAC9CJ,eApBN,SAA8BiC,GAC5BhB,EAAUgB,EAAEC,OAAO9B,OACnBe,GAAwB,IAmBpBlB,OAAQQ,QCxEhB0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.12b3f477.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function CurrencyRow(props) {\r\n    const { \r\n        currencyOptions,\r\n        selectedCurrency,\r\n        onChangeCurrency,\r\n        onChangeAmount,\r\n        amount\r\n    } = props \r\n    return (\r\n        <div>\r\n            <input type='number' className='input' value={amount} onChange={onChangeAmount} />\r\n            <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n                {currencyOptions.map(option => (\r\n                    <option key={option} value={option}>{option}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport CurrencyRow from './CurrencyRow'\n\n\nconst BASE_URL = 'http://api.exchangeratesapi.io/v1/latest?access_key=59082cd07a1424925e8f03e4b7831dfc'\n\nfunction App() {\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [fromCurrency, setFromCurrency] = useState()\n  const [toCurrency, setToCurrency] = useState()\n  const [amount, setAmount] = useState(1)\n  const [amountInFromCurrency, setamountInFromCurrency] = useState(true)\n  const [exchangeRate, setExchangeRate] = useState()\n  const [data, setData] = useState()\n\n  let toAmount, fromAmount\n\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else  {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        setData(data)\n        setCurrencyOptions([...Object.keys(data.rates)])\n        const firstcurrency = 'USD'\n        setFromCurrency(firstcurrency)\n        setToCurrency(data.base)\n        setExchangeRate(data.rates[firstcurrency])\n      })\n  }, [])\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null && data != null ) {\n      if (fromCurrency === data.base) {\n        setExchangeRate(data.rates[toCurrency])\n      } else if (toCurrency === data.base) {\n        setExchangeRate(data.rates[fromCurrency])\n      } else {\n        setExchangeRate(data.rates[toCurrency] / data.rates[fromCurrency])\n      }\n    }\n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setamountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setamountInFromCurrency(false)\n  }\n\n  return (\n    <>\n      <h1>Currency Converter</h1>\n      <CurrencyRow \n        currencyOptions={currencyOptions}\n        selectedCurrency={fromCurrency}\n        onChangeCurrency={e => setFromCurrency(e.target.value)}\n        onChangeAmount={handleFromAmountChange}\n        amount={fromAmount}\n      />\n      <div className='equals'>=</div>\n      <CurrencyRow \n        currencyOptions={currencyOptions}\n        selectedCurrency={toCurrency}\n        onChangeCurrency={e => setToCurrency(e.target.value)}\n        onChangeAmount={handleToAmountChange}\n        amount={toAmount}\n      />\n    </>\n  );\n}\n\nexport default App;\n\n// Adapted from https://youtu.be/XN5elYWiSuw","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}